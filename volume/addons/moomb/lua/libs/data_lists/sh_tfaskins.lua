TFA = TFA or {}
TFA.CSGO = TFA.CSGO or {}
TFA.CSGO.Skins = {} --Skin info that gets loaded through the LoadSkins func
TFA.CSGO.ExpData = TFA.CSGO.ExpData or {} --Skin info that gets loaded through the LoadSkins func
TFA.CSGO.SkinData = TFA.CSGO.SkinData or {} --Info like VMT Parameters
TFA.CSGO.SkinLangStrings = TFA.CSGO.SkinLangStrings or {} --Autogenerated in csgo_lang.lua
TFA.CSGO.SkinCache = TFA.CSGO.SkinCache or {} --Cached skin tables
local aabb = {}
TFA.CSGO.SkinData["default"] = {
	["vmt"] = {
		["$basetexture"] = "null",
		["$bumpmap"] = "null-bumpmap",
		["$phongexponenttexture"] = "null",
		["$phong"] = "1",
		["$phongboost"] = "2",
		["$phongalbedoboost"] = "35",
		["$phongfresnelranges"] = "[.83 .83 1]",
		["$phongalbedotint"] = "1",
		["$phongdisablehalflambert"] = "1",
		["$basemapalphaphongmask"] = "1",
		["$envmap"] = "env_cubemap",
		["$envmapfresnel"] = "1",
		["$envmaptint"] = "[.1 .1 .1]",
		["$basealphaenvmapmask"] = "1"
	}
}

--Adonized Multicolored
TFA.CSGO.SkinData["am_default"] = {
	["vmt"] = {
		["$phongboost"] = "48",
		["$phongalbedoboost"] = "120",
		["$phongfresnelranges"] = "[0.65 0.75 1]",
		["$envmapfresnel"] = "0.5",
		["$envmaptint"] = "[0.005 0.005 0.005]",
		["$color2"] = "[1.3 1.3 1.3]"
	}
}

--Adonized Airbrushed
TFA.CSGO.SkinData["aa_default"] = {
	["vmt"] = {
		["$phongboost"] = "32",
		["$phongalbedoboost"] = "128",
		["$phongfresnelranges"] = "[0.75 0.85 1]",
		["$envmapfresnel"] = "1",
		["$envmaptint"] = "[0.075 0.075 0.075]",
		["$color2"] = "[2 2 2]"
	}
}

--AN, whatever that is; somethign adonized
TFA.CSGO.SkinData["an_default"] = {
	["vmt"] = {
		["$phongboost"] = "32",
		["$phongalbedoboost"] = "128",
		["$phongfresnelranges"] = "[0.75 0.85 1]",
		["$envmapfresnel"] = "1",
		["$envmaptint"] = "[0.018 0.018 0.018]",
		["$color2"] = "[2 2 2]"
	}
}


--Patina ( presumably )
TFA.CSGO.SkinData["aq_default"] = {
	["vmt"] = {
		["$phongboost"] = "32",
		["$phongalbedoboost"] = "128",
		["$phongfresnelranges"] = "[0.6 0.75 1]",
		["$envmapfresnel"] = "1",
		["$envmaptint"] = "[0.02 0.02 0.025]"
	}
}

--Custom Paint
TFA.CSGO.SkinData["cu_default"] = {
	["vmt"] = {
		["$phongboost"] = "6",
		["$phongalbedoboost"] = "16",
		["$phongfresnelranges"] = "[0.15 0.55 1]",
		["$envmapfresnel"] = "0.3",
		["$envmaptint"] = "[0.01 0.01 0.01]"
	}
}

--Hydrographic
TFA.CSGO.SkinData["hy_default"] = {
	["vmt"] = {
		["$phongboost"] = "4",
		["$phongalbedoboost"] = "16",
		["$phongfresnelranges"] = "[0.15 0.55 1]",
		["$envmapfresnel"] = "0.2",
		["$envmaptint"] = "[0.05 0.05 0.05]"
	}
}

--Spraypaint
TFA.CSGO.SkinData["sp_default"] = {
	["vmt"] = {
		["$phongboost"] = "8",
		["$phongalbedoboost"] = "16",
		["$phongfresnelranges"] = "[0.1 0.55 1]",
		["$envmapfresnel"] = "0.3",
		["$envmaptint"] = "[0.1 0.1 0.1]"
	}
}

--Gunsmith
TFA.CSGO.SkinData["gs_default"] = {
	["vmt"] = {
		["$phongboost"] = "48",
		["$phongalbedoboost"] = "128",
		["$phongfresnelranges"] = "[0.6 0.75 1]",
		["$envmapfresnel"] = "0.6",
		["$envmaptint"] = "[0.01 0.01 0.01]",
		["$color2"] = "[1.3 1.3 1.3]"
	}
}

--Selfillum Paint
TFA.CSGO.SkinData["si_default"] = {
	["vmt"] = {
		["$selfillum"] = "1",
	}
}

--[[
	Example Lua File in the TFA External folder:

	TFA.CSGO.SkinData = TFA.CSGO.SkinData or {} --Info like VMT Parameters
	TFA.CSGO.SkinData["aug_red"] = {
		["name"] = "Red Hot"],
		["vmt"] = {
			["$phongboost"] = 16
		}
	}
]]--
local tbl_thumb, tbl_raw, tbl_raw_all, tbl_scopes, tbl, val, sp, sp_thumb, buf, sktbl

local function format_title(str)
	str = string.Replace(str, "_", " ")
	buf = {}

	for word in string.gmatch(str, "%S+") do
		local first, rest = string.sub(word, 1, 1), string.sub(word, 2)
		table.insert(buf, string.upper(first) .. string.lower(rest))
	end

	return table.concat(buf, " ")
end


local function MakeVMT( skin_table, diffuse_path, normal_path, exponent_path )
	local ind = util.CRC( skin_table.name_raw .. ( skin_table.tex_dif or "nil" ) .. ( skin_table.tex_nrm or "nil" ) ..  ( skin_table.tex_exp or "nil" ) )
	if not CreateMaterial then return ind end
	local vmt = table.Copy(TFA.CSGO.SkinData["default"].vmt)
	
	if TFA.CSGO.SkinData[skin_table.wep .. "_default"] and TFA.CSGO.SkinData[skin_table.wep .. "_default"].vmt then
		table.Merge(vmt, TFA.CSGO.SkinData[skin_table.wep .. "_default"].vmt)
	end

	if TFA.CSGO.SkinData[skin_table.type .. "_default"] and TFA.CSGO.SkinData[skin_table.type .. "_default"].vmt then
		table.Merge(vmt, TFA.CSGO.SkinData[skin_table.type .. "_default"].vmt)
	end

	if TFA.CSGO.SkinData[skin_table.name_raw] and TFA.CSGO.SkinData[skin_table.name_raw].vmt then
		table.Merge(vmt, TFA.CSGO.SkinData[skin_table.name_raw].vmt)
	end

	vmt["$basetexture"] = string.Replace( string.Replace( diffuse_path or vmt["$basetexture"], "materials/", ""), ".vtf", "" )
	vmt["$bumpmap"] = string.Replace( string.Replace( normal_path or vmt["$bumpmap"], "materials/", ""), ".vtf", "" )
	vmt["$phongexponenttexture"] = string.Replace( string.Replace( exponent_path or vmt["$phongexponenttexture"], "materials/", ""), ".vtf", "" )

	if normal_path then
		vmt["$basemapalphaphongmask"] = "0"
	end
	
	if CreateMaterial then
		return CreateMaterial( ind, "VertexLitGeneric", vmt)
	end
	return ind
end

local function MakeVMTCached( skin_table, diffuse_path, normal_path, exponent_path )
	local t = table.Copy(skin_table)
	t.tex_dif = diffuse_path or t.teX_dif
	t.tex_nrm = normal_path or t.tex_nrm
	t.tex_exp = exponent_path or t.tex_exp

	local ind = util.CRC( t.name_raw .. ( t.tex_dif or "nil" ) .. ( t.tex_nrm or "nil" ) .. ( t.tex_exp or "nil" ) )
	TFA.CSGO.SkinCache[ind] = t

	return ind
end

function TFA.CSGO.LoadCachedVMT( ind )
	local t = TFA.CSGO.SkinCache[ind]
	if t then
		if not t.loaded then
			t.loaded = true
			return MakeVMT( t, t.tex_dif, t.tex_nrm, t.tex_exp )
		//else
		//	return Material("!"..ind)
		end
	end
end

function TFA.CSGO.LoadSkins(searchpath)
	TFA_CSGO_SKIN_INCREMENT = TFA_CSGO_SKIN_INCREMENT or 0
	sp = searchpath or "materials/csgo_skins/"
	sp = string.Replace(sp, "\\", "/")

	if not string.EndsWith(sp, "/") then
		sp = sp .. "/"
	end 
	sp_thumb = string.Replace( sp, "materials/", "materials/entities/" )

	tbl_raw = file.Find( sp .. "weapon_*-diffuse.vtf", "GAME", "namedesc")
	tbl_raw_all = file.Find( sp .. "weapon_*.vtf", "GAME", "namedesc")
	tbl_thumb = file.Find( sp_thumb .. "weapon_*-diffuse.png", "GAME", "namedesc")
	tbl_scopes = file.Find( sp .. "/scopes/weapon_*.vtf", "GAME", "namedesc")

	tbl = {}

	for i = 1, #tbl_raw do
		val = tbl_raw[i]

		local ltbl = { 
			["class"] = string.gsub(val, "weapon_([%w_]+)-([%w_-]+)-diffuse.vtf", "weapon_%1_csgo"),
			["wep"] = string.gsub(val, "weapon_([%w_]+)-([%w_-]+)-diffuse.vtf", "%1"),
			["type"] = string.gsub(val, "weapon_([%w_]+)-([%w]+)_([%w_-]+)-diffuse.vtf", "%2"),
			["name"] = string.gsub(val, "weapon_([%w_]+)-([%w]+)_([%w_-]+)-diffuse.vtf", "%3"),
			["name_lang"] = string.lower( string.gsub(val, "weapon_([%w_]+)-([%w_-]+)-diffuse.vtf", "%2") ),
			["tex_dif"] = string.gsub(val, "([%w_-]+)-diffuse.vtf", "%1-diffuse"),
			["tex_nrm"] = string.gsub(val, "([%w_-]+)-diffuse.vtf", "%1-normal"),	
			["tex_exp"] = string.gsub(val, "([%w_-]+)-diffuse.vtf", "%1-exponent")
		}

		ltbl.path_dif = sp .. ltbl.tex_dif
		ltbl.path_nrm = sp .. ltbl.tex_nrm	
		ltbl.path_exp = sp .. ltbl.tex_exp
		
		if not table.HasValue( tbl_raw_all , ltbl.tex_nrm .. ".vtf") then
			ltbl.tex_nrm = nil
			ltbl.path_nrm = nil
		end
		
		
		if not table.HasValue( tbl_raw_all, ltbl.tex_exp .. ".vtf" ) then
			ltbl.tex_exp = nil
			ltbl.path_exp = nil
		end
		
		ltbl.name = string.gsub(ltbl.name, ltbl.wep .. "_([%w_-]+)", "%1")
		ltbl.name_raw = ltbl.wep .. "_" .. ltbl.name

		if TFA.CSGO.SkinData[ltbl.name_raw] and TFA.CSGO.SkinData[ltbl.name_raw].name then
			ltbl.name_print = TFA.CSGO.SkinData[ltbl.name_raw].name
		elseif TFA.CSGO.SkinLangStrings[ ltbl.name_lang ] then
			ltbl.name_print = TFA.CSGO.SkinLangStrings[ltbl.name_lang]
		else
			ltbl.name_print = format_title(ltbl.name)
		end
		
		if table.HasValue( tbl_thumb, ltbl.tex_dif .. ".png" ) then
			ltbl.thumbnail = sp_thumb .. ltbl.tex_dif .. ".png"
		end
		if table.HasValue( tbl_scopes, ltbl.tex_dif .. ".vtf" ) then
			ltbl.path_dif_scope = sp .. "/scopes/" .. ltbl.tex_dif
		end
		if ltbl.tex_exp then
			if table.HasValue( tbl_scopes, ltbl.tex_exp .. ".vtf" ) then
				ltbl.path_exp_scope = sp .. "/scopes/" .. ltbl.tex_dif
			end
		end
		
		if TTS and TTS.TFA then   
			ltbl.class = TTS.TFA.Reverse[ltbl.wep] or ltbl.class
			TTS.TFA.MakeSWEP({class = ltbl.class.."_"..ltbl.name, base = ltbl.class, name = ltbl.name})   
			hook.Call("TTS.TFA::MakeSWEP", TTS.TFA, ltbl.class.."_"..ltbl.name, ltbl.class, ltbl.name)    
		end
		tbl[#tbl + 1] = ltbl
		
	end
 
	for i = 1, #tbl do  
		sktbl = tbl[i]
		
		TFA.CSGO.Skins[sktbl.class] = TFA.CSGO.Skins[sktbl.class] or {}

		TFA.CSGO.Skins[sktbl.class][sktbl.name] = {
			["name"] = sktbl.name_print,
			["id"] =  "!" .. MakeVMTCached( sktbl, sktbl.path_dif, sktbl.path_nrm, sktbl.path_exp, sktbl.class, sktbl.name ) 
		}

		if sktbl.thumbnail then
			TFA.CSGO.Skins[sktbl.class][sktbl.name]["image"] = sktbl.thumbnail 
		end
		
	end

	if TFA_CSGO_SKINS then 
		for k,v in pairs(TFA_CSGO_SKINS) do
			if not TFA.CSGO.Skins[k] then
				TFA.CSGO.Skins[k] = {}
			end
			for l,b in pairs(v) do
				if not TFA.CSGO.Skins[k][l] then
					TFA.CSGO.Skins[k][l] = table.Copy(b)
				end
			end
		end
		TFA_CSGO_SKINS = nil
	end

	TFA_CSGO_SKIN_INCREMENT = TFA_CSGO_SKIN_INCREMENT + 1
end

if TFA_CSGO then
	--Hot Reloading
	TFA.CSGO.LoadSkins()      
end

hook.Add("Initialize", "TFA_CSGO_LOADSKINS", TFA.CSGO.LoadSkins)
TFA_CSGO = true


-- for i,v in pairs(TFA.CSGO.SkinCache) do
	-- v.tex_dif = diffuse_path or t.teX_dif
	-- t.tex_exp = exponent_path or t.tex_exp
	
	-- //materials/csgo_skins/weapon_awp-cu_awp_cobra-diffuse
	-- //tex_exp	=	materials/csgo_skins/weapon_awp-cu_awp_cobra-exponent

	
	-- local ind = util.CRC( t.name_raw .. ( t.tex_dif or "nil" ) .. ( t.tex_exp or "nil" ) )
	-- local aaa = util.CRC( "cobra".. ( "materials/csgo_skins/weapon_awp-cu_awp_cobra-diffuse" ) .. ( "materials/csgo_skins/weapon_awp-cu_awp_cobra-exponent" ) )
	-- //1924091102:
	-- //print(aaa)
	
-- end

//table.Empty(TFA.CSGO.SkinCache)
//TFA.CSGO.LoadSkins()
//print('---')
-- PrintTable(TFA.CSGO.SkinCache)
-- PrintTable(TFA.CSGO.Skins)
//print('---')
	//local aaa = util.CRC( "awp_cobra".. ( "materials/csgo_skins/weapon_awp-cu_awp_cobra-diffuse" ) .. ( "materials/csgo_skins/weapon_awp-cu_awp_cobra-exponent" ) )
	//1924091102:
	//print(1924091102, aaa)    